(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{417:function(t,n,a){"use strict";a.r(n);var e=a(18),s=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"python-style-guide"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python-style-guide"}},[t._v("#")]),t._v(" Python Style Guide")]),t._v(" "),a("p",[t._v("Follow the "),a("a",{attrs:{href:"http://www.python.org/dev/peps/pep-0008/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python Style Guide (PSG) as formulated in PEP-8"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("Use "),a("code",[t._v("pylint")]),t._v(" to lint code. You can also use "),a("a",{attrs:{href:"https://github.com/google/yapf/",target:"_blank",rel:"noopener noreferrer"}},[t._v("yapf"),a("OutboundLink")],1),t._v(" which is an auto-formatting tool.")]),t._v(" "),a("h2",{attrs:{id:"python-2-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python-2-3"}},[t._v("#")]),t._v(" Python 2/3")]),t._v(" "),a("p",[t._v("As a rule, all Python code should be written to support Python 3. No code should be written to be compatible with Python 2 only.")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://docs.python.org/3/howto/pyporting.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python porting guide"),a("OutboundLink")],1),t._v(" has great, practical advice on writing code for Python 2 and 3, if strictly necessary. Some choose to use helper libraries like "),a("code",[t._v("six")]),t._v(". In any case, it is strongly recommend to follow the advice from the Python porting guide and add the following snippet to all Python modules to ensure API consistency for strings, division, imports, and the print function.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding: utf-8 -*-")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" __future__ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" division\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" __future__ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" print_function\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" __future__ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" absolute_import\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" __future__ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" unicode_literals\n\n")])])]),a("p",[t._v("Follow the "),a("a",{attrs:{href:"http://www.python.org/dev/peps/pep-0008/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python Style Guide (PSG) as formulated in PEP-8"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"indentation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indentation"}},[t._v("#")]),t._v(" Indentation")]),t._v(" "),a("ul",[a("li",[t._v("Do not use tab for indentation")]),t._v(" "),a("li",[t._v("Give 4 spaces for every indent")]),t._v(" "),a("li",[t._v("Strictly enforce a 79 character line limit")])]),t._v(" "),a("p",[t._v("Correct Indentation: üëç")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("    Good Example  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Aligned with opening delimiter")]),t._v("\n       foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" long_function_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("var_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var_two"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                var_three"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var_four"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n       meal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("spam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n               beans"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Aligned with opening delimiter in a dictionary")]),t._v("\n       foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           long_dictionary_key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" value1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n                                value2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4-space hanging indent; nothing on first line")]),t._v("\n       foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" long_function_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n           var_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var_two"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var_three"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n           var_four"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n       meal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n           spam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n           beans"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4-space hanging indent in a dictionary")]),t._v("\n       foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           long_dictionary_key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n               long_dictionary_value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Incorrect indentation: üëé")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("    Bad Example   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Not aligned with opening delimiter")]),t._v("\n       foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" long_function_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("var_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var_two"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("var_three"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       var_four"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n       meal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("spam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       beans"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Not aligned with opening delimiter in a dictionary")]),t._v("\n       foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("long_dictionary_key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" value1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n                                value2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# No space hanging indent; nothing on first line")]),t._v("\n       foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" long_function_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        var_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var_two"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var_three"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        var_four"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n       meal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n           spam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n           beans"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# No space hanging indent in a dictionary")]),t._v("\n       foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           long_dictionary_key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            long_dictionary_value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"lint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lint"}},[t._v("#")]),t._v(" Lint")]),t._v(" "),a("p",[t._v("Run "),a("a",{attrs:{href:"https://www.pylint.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("pylint"),a("OutboundLink")],1),t._v(" over your code.")]),t._v(" "),a("p",[t._v("Pylint can be helpful for debugging. It catches errors that are easy-to-miss errors like typos, etc.")]),t._v(" "),a("h3",{attrs:{id:"naming-conventions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#naming-conventions"}},[t._v("#")]),t._v(" Naming Conventions")]),t._v(" "),a("p",[t._v("Use common language conventions for naming functions, classes and variables.")]),t._v(" "),a("ul",[a("li",[t._v("Variables, functions and methods should be "),a("code",[t._v("lower_case_with_underscores")])])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("this_is_a_good_example\nNot"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("A"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Good"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Naming"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Choice\n")])])]),a("ul",[a("li",[t._v("Classes are "),a("code",[t._v("TitleCase")])])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("GoodExample\nnotAGoodexample\n")])])]),a("p",[t._v("And other preferences:")]),t._v(" "),a("ul",[a("li",[t._v('Use ‚Äô and not " as the quote character by default')]),t._v(" "),a("li",[t._v("When writing a method, consider if it is really a method (needs self) or if it would be better as a utility function")]),t._v(" "),a("li",[t._v("When writing a @classmethod, consider if it really needs the class (needs cls) or it would be better as a utility function or factory class")])]),t._v(" "),a("h2",{attrs:{id:"frameworks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#frameworks"}},[t._v("#")]),t._v(" Frameworks")]),t._v(" "),a("p",[t._v("We prefer the following frameworks and libraries. If you want to use an alternative to one of these please flag this before starting any work.")]),t._v(" "),a("ul",[a("li",[t._v("Flask")]),t._v(" "),a("li",[t._v("Click")])]),t._v(" "),a("h2",{attrs:{id:"submitting-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#submitting-code"}},[t._v("#")]),t._v(" Submitting code")]),t._v(" "),a("ul",[a("li",[t._v("Code should be submitted via pull requests, which another person should merge.")]),t._v(" "),a("li",[t._v("Use continuous deployment.\n"),a("ul",[a("li",[t._v("Apps should be deployed from a continuous integration service when a successful build is made on the branch used for production.")]),t._v(" "),a("li",[t._v("Packages should be published to the respective package registry when a tag is pushed.")]),t._v(" "),a("li",[t._v("Write small, reusable libraries where possible. There are many opportunities for reuse across our different products.")])])])]),t._v(" "),a("h2",{attrs:{id:"docstrings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docstrings"}},[t._v("#")]),t._v(" Docstrings")]),t._v(" "),a("p",[t._v("Use Sphinx-style or Google-style documentation conventions.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://packages.python.org/an_example_pypi_project/sphinx.html#function-definitions",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sphinx-style"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://google.github.io/styleguide/pyguide.html#Comments",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Style Documentation"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"user-documentation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#user-documentation"}},[t._v("#")]),t._v(" User documentation")]),t._v(" "),a("p",[t._v("Prefer to make really good "),a("code",[t._v("README.md")]),t._v(" files, rather than implementing a full documentation framework.")]),t._v(" "),a("h2",{attrs:{id:"testing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#testing"}},[t._v("#")]),t._v(" Testing")]),t._v(" "),a("h3",{attrs:{id:"tox-and-py-test"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tox-and-py-test"}},[t._v("#")]),t._v(" tox and py.test")]),t._v(" "),a("p",[t._v("Use "),a("code",[t._v("tox")]),t._v(" with "),a("code",[t._v("py.test")]),t._v(" to test code.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://tox.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"}},[t._v("tox overview and guide"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.guru99.com/pytest-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("py.test overview and guide"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=s.exports}}]);