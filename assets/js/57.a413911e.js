(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{421:function(e,s,t){"use strict";t.r(s);var a=t(18),o=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"version-control"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#version-control"}},[e._v("#")]),e._v(" Version Control")]),e._v(" "),t("p",[e._v("We use Git for all projects.")]),e._v(" "),t("h3",{attrs:{id:"commit-messages"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#commit-messages"}},[e._v("#")]),e._v(" Commit messages")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("ex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": plotly json examples - fixes "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#23.")]),e._v("\n")])])]),t("p",[e._v("That is:")]),e._v(" "),t("ul",[t("li",[e._v("a tag: "),t("code",[e._v("[ex]")]),e._v(" this is an example – you make these tags up and use them consistently.")]),e._v(" "),t("li",[e._v("a size: "),t("code",[e._v("[m]")]),e._v(" a size of this commit one of the following: "),t("code",[e._v("xs")]),e._v(", "),t("code",[e._v("s")]),e._v(", "),t("code",[e._v("m")]),e._v(", "),t("code",[e._v("l")]),e._v(", "),t("code",[e._v("xl")]),e._v(".")]),e._v(" "),t("li",[e._v("a short descriptive sentence of what you did. I need this as well as what issue this refs as I need to be able to understand the commit on its own without reading something else.")]),e._v(" "),t("li",[e._v("Finally anything that involves referencing or closing a github issue. e.g. "),t("code",[e._v("refs #xx")]),e._v(" or "),t("code",[e._v("fixes #xx")]),e._v(" (fixes and closes are synonymous so use either one).")])]),e._v(" "),t("p",[e._v("So command would look like this:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit -m "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'[ex][m]: plotly json examples - fixes #23.'")]),e._v("\n")])])]),t("h3",{attrs:{id:"branch-management"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#branch-management"}},[e._v("#")]),e._v(" Branch management")]),e._v(" "),t("p",[e._v("We generally follow "),t("a",{attrs:{href:"https://nvie.com/posts/a-successful-git-branching-model/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Git Flow"),t("OutboundLink")],1),e._v(", with some modifications, and some flexibility per project. The following should hold true for pretty much all projects:")]),e._v(" "),t("ul",[t("li",[e._v("Have a "),t("code",[e._v("master")]),e._v(" branch.")]),e._v(" "),t("li",[e._v("Never commit directly to "),t("code",[e._v("master")]),e._v(".")]),e._v(" "),t("li",[e._v("Always work from a "),t("code",[e._v("feature/{}")]),e._v(" or a "),t("code",[e._v("fix/{}")]),e._v(" branch that is checked out from "),t("code",[e._v("master")]),e._v(".")]),e._v(" "),t("li",[e._v("Always reference issues from Git messages using "),t("code",[e._v("#{issue_id}")]),e._v(", and the various other related conventions used by most Git hosts.")]),e._v(" "),t("li",[e._v("Properly describe changes in commit messages: “Fixes database migration script failure on Python 2.7”, not “Fix.”")]),e._v(" "),t("li",[e._v("Prefer to use the “Squash and merge” approach for pull requests using GitHub web interface.")])])])}),[],!1,null,null,null);s.default=o.exports}}]);